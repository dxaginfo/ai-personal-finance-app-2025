generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  name           String
  hashedPassword String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  accounts       Account[]
  transactions   Transaction[]
  budgets        Budget[]
  goals          Goal[]
  riskProfile    RiskProfile?
}

model Account {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plaidAccountId String?  @unique
  accountName   String
  accountType   AccountType
  institution   String
  balance       Float
  currency      String   @default("USD")
  isActive      Boolean  @default(true)
  lastUpdated   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  transactions  Transaction[]
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT
  INVESTMENT
  LOAN
  OTHER
}

model Transaction {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId       String
  account         Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  plaidTransactionId String? @unique
  amount          Float
  date            DateTime
  description     String
  category        String
  isIncome        Boolean   @default(false)
  isRecurring     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Budget {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  amount      Float
  category    String
  period      BudgetPeriod
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Goal {
  id           String      @id @default(uuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  description  String?
  goalType     GoalType
  targetAmount Float
  currentAmount Float       @default(0)
  targetDate   DateTime?
  status       GoalStatus  @default(IN_PROGRESS)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum GoalType {
  EMERGENCY_FUND
  DEBT_REPAYMENT
  MAJOR_PURCHASE
  RETIREMENT
  EDUCATION
  VACATION
  OTHER
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model RiskProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  riskTolerance     RiskLevel
  investmentHorizon Int      // in years
  answers           Json?    // store questionnaire answers
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum RiskLevel {
  CONSERVATIVE
  MODERATE
  AGGRESSIVE
}
